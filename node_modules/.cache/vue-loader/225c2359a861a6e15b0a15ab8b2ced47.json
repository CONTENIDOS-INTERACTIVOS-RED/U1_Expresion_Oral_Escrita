{"remainingRequest":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/src/views/curso/Tema2.vue?vue&type=template&id=6ba124be&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/src/views/curso/Tema2.vue","mtime":1743992753825},{"path":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Expresion_Oral_Escrita/U1_Expresion_Oral_Escrita/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}